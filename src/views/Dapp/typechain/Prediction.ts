/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Prediction {
  export type BetInfoStruct = {
    position: BigNumberish;
    token: string;
    amount: BigNumberish;
    claimed: boolean;
  };

  export type BetInfoStructOutput = [number, string, BigNumber, boolean] & {
    position: number;
    token: string;
    amount: BigNumber;
    claimed: boolean;
  };
}

export interface PredictionInterface extends utils.Interface {
  contractName: "Prediction";
  functions: {
    "BNB()": FunctionFragment;
    "MAX_TREASURY_FEE()": FunctionFragment;
    "addTokens(address[],address[])": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "betAmount()": FunctionFragment;
    "betSeconds()": FunctionFragment;
    "bufferSeconds()": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "claimTreasury()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "endRound()": FunctionFragment;
    "getRound(uint256)": FunctionFragment;
    "getStats(uint256)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "getUserRoundsLength(address)": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "intervalSeconds()": FunctionFragment;
    "ledger(uint256,address)": FunctionFragment;
    "lostLastRound(address)": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "oracleLatestRoundId()": FunctionFragment;
    "oracleUpdateAllowance()": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pred()": FunctionFragment;
    "predictBear(uint256,address)": FunctionFragment;
    "predictBull(uint256,address)": FunctionFragment;
    "recoverToken(address,uint256)": FunctionFragment;
    "refundable(uint256,address)": FunctionFragment;
    "removeTokens(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBetAmount(uint256)": FunctionFragment;
    "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setOracleUpdateAllowance(uint256)": FunctionFragment;
    "setOracles(address[],address[])": FunctionFragment;
    "setTokenMaxBet(uint256)": FunctionFragment;
    "startRound()": FunctionFragment;
    "tokenMaxBet()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userRounds(address,uint256)": FunctionFragment;
    "wonLastRound(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_TREASURY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokens",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "betSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bufferSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endRound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lostLastRound",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleLatestRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleUpdateAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracles", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pred", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictBear",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "predictBull",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBufferBetAndIntervalSeconds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracleUpdateAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracles",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMaxBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaxBet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRounds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wonLastRound",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betSeconds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lostLastRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleLatestRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleUpdateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pred", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictBear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBufferBetAndIntervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleUpdateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMaxBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaxBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userRounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wonLastRound",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "EndRound(uint256,uint256,int256)": EventFragment;
    "NewAdminAddress(address)": EventFragment;
    "NewBetAmount(uint256,uint256)": EventFragment;
    "NewBufferAndIntervalSeconds(uint256,uint256)": EventFragment;
    "NewOperatorAddress(address)": EventFragment;
    "NewOracle(address,address)": EventFragment;
    "NewOracleUpdateAllowance(uint256)": EventFragment;
    "NewTokenMaxBet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PredictBear(address,uint256,address,uint256)": EventFragment;
    "PredictBull(address,uint256,address,uint256)": EventFragment;
    "StartRound(uint256)": EventFragment;
    "TokenAdded(address,address)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
    "TokenRemoved(address,address)": EventFragment;
    "TreasuryClaim(uint256)": EventFragment;
    "Unpause(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBetAmount"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewBufferAndIntervalSeconds"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperatorAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracleUpdateAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenMaxBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; epoch: BigNumber; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type EndRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { epoch: BigNumber; roundId: BigNumber; price: BigNumber }
>;

export type EndRoundEventFilter = TypedEventFilter<EndRoundEvent>;

export type NewAdminAddressEvent = TypedEvent<[string], { admin: string }>;

export type NewAdminAddressEventFilter = TypedEventFilter<NewAdminAddressEvent>;

export type NewBetAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  { epoch: BigNumber; betAmount: BigNumber }
>;

export type NewBetAmountEventFilter = TypedEventFilter<NewBetAmountEvent>;

export type NewBufferAndIntervalSecondsEvent = TypedEvent<
  [BigNumber, BigNumber],
  { bufferSeconds: BigNumber; intervalSeconds: BigNumber }
>;

export type NewBufferAndIntervalSecondsEventFilter =
  TypedEventFilter<NewBufferAndIntervalSecondsEvent>;

export type NewOperatorAddressEvent = TypedEvent<
  [string],
  { operator: string }
>;

export type NewOperatorAddressEventFilter =
  TypedEventFilter<NewOperatorAddressEvent>;

export type NewOracleEvent = TypedEvent<
  [string, string],
  { oracle: string; token: string }
>;

export type NewOracleEventFilter = TypedEventFilter<NewOracleEvent>;

export type NewOracleUpdateAllowanceEvent = TypedEvent<
  [BigNumber],
  { oracleUpdateAllowance: BigNumber }
>;

export type NewOracleUpdateAllowanceEventFilter =
  TypedEventFilter<NewOracleUpdateAllowanceEvent>;

export type NewTokenMaxBetEvent = TypedEvent<
  [BigNumber],
  { tokenMaxBet: BigNumber }
>;

export type NewTokenMaxBetEventFilter = TypedEventFilter<NewTokenMaxBetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PredictBearEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { sender: string; epoch: BigNumber; token: string; amount: BigNumber }
>;

export type PredictBearEventFilter = TypedEventFilter<PredictBearEvent>;

export type PredictBullEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { sender: string; epoch: BigNumber; token: string; amount: BigNumber }
>;

export type PredictBullEventFilter = TypedEventFilter<PredictBullEvent>;

export type StartRoundEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>;

export type StartRoundEventFilter = TypedEventFilter<StartRoundEvent>;

export type TokenAddedEvent = TypedEvent<
  [string, string],
  { token: string; oracle: string }
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export type TokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type TokenRecoveryEventFilter = TypedEventFilter<TokenRecoveryEvent>;

export type TokenRemovedEvent = TypedEvent<
  [string, string],
  { token: string; oracle: string }
>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export type TreasuryClaimEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type TreasuryClaimEventFilter = TypedEventFilter<TreasuryClaimEvent>;

export type UnpauseEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Prediction extends BaseContract {
  contractName: "Prediction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PredictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BNB(overrides?: CallOverrides): Promise<[string]>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    betAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    betSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    bufferSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    endRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
        _tokens: string[];
        lockedPrices: BigNumber[];
        closePrices: BigNumber[];
        lockedOracleIds: BigNumber[];
        closeOracleIds: BigNumber[];
        bets: BigNumber[];
      }
    >;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        _tokens: string[];
        bulls: BigNumber[];
        bears: BigNumber[];
      }
    >;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Prediction.BetInfoStructOutput[], BigNumber]>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, boolean] & {
        position: number;
        token: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    lostLastRound(loser: string, overrides?: CallOverrides): Promise<[boolean]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pred(overrides?: CallOverrides): Promise<[string]>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
      }
    >;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracles(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMaxBet(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wonLastRound(winner: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  BNB(overrides?: CallOverrides): Promise<string>;

  MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addTokens(
    _tokens: string[],
    _oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  betAmount(overrides?: CallOverrides): Promise<BigNumber>;

  betSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  endRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRound(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      epoch: BigNumber;
      lockedTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      totalAmount: BigNumber;
      oraclesCalled: boolean;
      _tokens: string[];
      lockedPrices: BigNumber[];
      closePrices: BigNumber[];
      lockedOracleIds: BigNumber[];
      closeOracleIds: BigNumber[];
      bets: BigNumber[];
    }
  >;

  getStats(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[]] & {
      _tokens: string[];
      bulls: BigNumber[];
      bears: BigNumber[];
    }
  >;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  getUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], Prediction.BetInfoStructOutput[], BigNumber]>;

  getUserRoundsLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _adminAddress: string,
    _operatorAddress: string,
    _intervalSeconds: BigNumberish,
    _bufferSeconds: BigNumberish,
    _betSeconds: BigNumberish,
    _betAmount: BigNumberish,
    _oracleUpdateAllowance: BigNumberish,
    _tokenMaxBet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, boolean] & {
      position: number;
      token: string;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  lostLastRound(loser: string, overrides?: CallOverrides): Promise<boolean>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pred(overrides?: CallOverrides): Promise<string>;

  predictBear(
    epoch: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictBull(
    epoch: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTokens(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      epoch: BigNumber;
      lockedTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      totalAmount: BigNumber;
      oraclesCalled: boolean;
    }
  >;

  setAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBetAmount(
    _betAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBufferBetAndIntervalSeconds(
    _bufferSeconds: BigNumberish,
    _intervalSeconds: BigNumberish,
    _betSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleUpdateAllowance(
    _oracleUpdateAllowance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracles(
    _tokens: string[],
    _oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMaxBet(
    _tokenMaxBet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRounds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wonLastRound(winner: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    BNB(overrides?: CallOverrides): Promise<string>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    betSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    claim(epochs: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    claimTreasury(overrides?: CallOverrides): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(overrides?: CallOverrides): Promise<void>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
        _tokens: string[];
        lockedPrices: BigNumber[];
        closePrices: BigNumber[];
        lockedOracleIds: BigNumber[];
        closeOracleIds: BigNumber[];
        bets: BigNumber[];
      }
    >;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        _tokens: string[];
        bulls: BigNumber[];
        bears: BigNumber[];
      }
    >;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Prediction.BetInfoStructOutput[], BigNumber]>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, boolean] & {
        position: number;
        token: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    lostLastRound(loser: string, overrides?: CallOverrides): Promise<boolean>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pred(overrides?: CallOverrides): Promise<string>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
      }
    >;

    setAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracles(
      _tokens: string[],
      _oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startRound(overrides?: CallOverrides): Promise<void>;

    tokenMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wonLastRound(winner: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Claim(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): ClaimEventFilter;

    "EndRound(uint256,uint256,int256)"(
      epoch?: BigNumberish | null,
      roundId?: BigNumberish | null,
      price?: null
    ): EndRoundEventFilter;
    EndRound(
      epoch?: BigNumberish | null,
      roundId?: BigNumberish | null,
      price?: null
    ): EndRoundEventFilter;

    "NewAdminAddress(address)"(admin?: null): NewAdminAddressEventFilter;
    NewAdminAddress(admin?: null): NewAdminAddressEventFilter;

    "NewBetAmount(uint256,uint256)"(
      epoch?: BigNumberish | null,
      betAmount?: null
    ): NewBetAmountEventFilter;
    NewBetAmount(
      epoch?: BigNumberish | null,
      betAmount?: null
    ): NewBetAmountEventFilter;

    "NewBufferAndIntervalSeconds(uint256,uint256)"(
      bufferSeconds?: null,
      intervalSeconds?: null
    ): NewBufferAndIntervalSecondsEventFilter;
    NewBufferAndIntervalSeconds(
      bufferSeconds?: null,
      intervalSeconds?: null
    ): NewBufferAndIntervalSecondsEventFilter;

    "NewOperatorAddress(address)"(
      operator?: null
    ): NewOperatorAddressEventFilter;
    NewOperatorAddress(operator?: null): NewOperatorAddressEventFilter;

    "NewOracle(address,address)"(
      oracle?: null,
      token?: null
    ): NewOracleEventFilter;
    NewOracle(oracle?: null, token?: null): NewOracleEventFilter;

    "NewOracleUpdateAllowance(uint256)"(
      oracleUpdateAllowance?: null
    ): NewOracleUpdateAllowanceEventFilter;
    NewOracleUpdateAllowance(
      oracleUpdateAllowance?: null
    ): NewOracleUpdateAllowanceEventFilter;

    "NewTokenMaxBet(uint256)"(tokenMaxBet?: null): NewTokenMaxBetEventFilter;
    NewTokenMaxBet(tokenMaxBet?: null): NewTokenMaxBetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause(uint256)"(epoch?: BigNumberish | null): PauseEventFilter;
    Pause(epoch?: BigNumberish | null): PauseEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PredictBear(address,uint256,address,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): PredictBearEventFilter;
    PredictBear(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): PredictBearEventFilter;

    "PredictBull(address,uint256,address,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): PredictBullEventFilter;
    PredictBull(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): PredictBullEventFilter;

    "StartRound(uint256)"(epoch?: BigNumberish | null): StartRoundEventFilter;
    StartRound(epoch?: BigNumberish | null): StartRoundEventFilter;

    "TokenAdded(address,address)"(
      token?: null,
      oracle?: null
    ): TokenAddedEventFilter;
    TokenAdded(token?: null, oracle?: null): TokenAddedEventFilter;

    "TokenRecovery(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TokenRecoveryEventFilter;
    TokenRecovery(
      token?: string | null,
      amount?: null
    ): TokenRecoveryEventFilter;

    "TokenRemoved(address,address)"(
      token?: null,
      oracle?: null
    ): TokenRemovedEventFilter;
    TokenRemoved(token?: null, oracle?: null): TokenRemovedEventFilter;

    "TreasuryClaim(uint256)"(amount?: null): TreasuryClaimEventFilter;
    TreasuryClaim(amount?: null): TreasuryClaimEventFilter;

    "Unpause(uint256)"(epoch?: BigNumberish | null): UnpauseEventFilter;
    Unpause(epoch?: BigNumberish | null): UnpauseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    BNB(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    betSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lostLastRound(loser: string, overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pred(overrides?: CallOverrides): Promise<BigNumber>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracles(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wonLastRound(winner: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bufferSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lostLastRound(
      loser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleLatestRoundId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleUpdateAllowance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pred(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracles(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMaxBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wonLastRound(
      winner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
