/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace SportPrediction {
  export type PredictionStruct = {
    user: string;
    eventId: BytesLike;
    amount: BigNumberish;
    reward: BigNumberish;
    teamAScore: BigNumberish;
    teamBScore: BigNumberish;
    predicted: boolean;
    claimed: boolean;
  };

  export type PredictionStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    boolean
  ] & {
    user: string;
    eventId: string;
    amount: BigNumber;
    reward: BigNumber;
    teamAScore: number;
    teamBScore: number;
    predicted: boolean;
    claimed: boolean;
  };
}

export declare namespace ISportPrediction {
  export type SportEventStruct = {
    id: BytesLike;
    teamA: BytesLike;
    teamB: BytesLike;
    league: BytesLike;
    round: BytesLike;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    outcome: BigNumberish;
    season: BigNumberish;
    realTeamAScore: BigNumberish;
    realTeamBScore: BigNumberish;
  };

  export type SportEventStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number
  ] & {
    id: string;
    teamA: string;
    teamB: string;
    league: string;
    round: string;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    outcome: number;
    season: number;
    realTeamAScore: number;
    realTeamBScore: number;
  };
}

export interface SportPredictionInterface extends utils.Interface {
  contractName: "SportPrediction";
  functions: {
    "claim(bytes32[])": FunctionFragment;
    "crp()": FunctionFragment;
    "eventToUserPrediction(bytes32,address)": FunctionFragment;
    "eventToUsers(bytes32,uint256)": FunctionFragment;
    "getAllUserPredictions(address)": FunctionFragment;
    "getEvents(bytes32[])": FunctionFragment;
    "getEventsLength()": FunctionFragment;
    "getIndexedEvents(uint256[])": FunctionFragment;
    "getLiveEvents()": FunctionFragment;
    "getMultiplier()": FunctionFragment;
    "getPredictableEvents()": FunctionFragment;
    "getPredictions(bytes32)": FunctionFragment;
    "getUserPredictions(address,bytes32[])": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "maxPredictions()": FunctionFragment;
    "owner()": FunctionFragment;
    "predict(bytes32,int8,int8)": FunctionFragment;
    "predictAmount()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxPredictions(uint256)": FunctionFragment;
    "setMultiplier(uint256)": FunctionFragment;
    "setOracleAddress(address)": FunctionFragment;
    "setPredictAmount(uint256)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "sportOracle()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userPredictStatus(address,bytes32[])": FunctionFragment;
    "userToEvents(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "crp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventToUserPrediction",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eventToUsers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUserPredictions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvents",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexedEvents",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiveEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPredictableEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPredictions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPredictions",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPredictions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predict",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPredictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPredictAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sportOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPredictStatus",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userToEvents",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventToUserPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventToUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUserPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPredictableEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "predict", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPredictAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sportOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPredictStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToEvents",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Claim(address,bytes32,uint256)": EventFragment;
    "MaxPredictionsSet(uint256)": EventFragment;
    "MultiplierSet(uint256)": EventFragment;
    "OracleAddressSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PredictAmountSet(uint256)": EventFragment;
    "PredictionPlaced(bytes32,address,int8,int8,uint256)": EventFragment;
    "TreasuryAddressSet(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxPredictionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiplierSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictionPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type ClaimEvent = TypedEvent<
  [string, string, BigNumber],
  { user: string; eventId: string; reward: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type MaxPredictionsSetEvent = TypedEvent<
  [BigNumber],
  { _maxPredictions: BigNumber }
>;

export type MaxPredictionsSetEventFilter =
  TypedEventFilter<MaxPredictionsSetEvent>;

export type MultiplierSetEvent = TypedEvent<
  [BigNumber],
  { multiplier: BigNumber }
>;

export type MultiplierSetEventFilter = TypedEventFilter<MultiplierSetEvent>;

export type OracleAddressSetEvent = TypedEvent<[string], { _address: string }>;

export type OracleAddressSetEventFilter =
  TypedEventFilter<OracleAddressSetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PredictAmountSetEvent = TypedEvent<
  [BigNumber],
  { _address: BigNumber }
>;

export type PredictAmountSetEventFilter =
  TypedEventFilter<PredictAmountSetEvent>;

export type PredictionPlacedEvent = TypedEvent<
  [string, string, number, number, BigNumber],
  {
    _eventId: string;
    _player: string;
    _teamAScore: number;
    _teamBScore: number;
    _amount: BigNumber;
  }
>;

export type PredictionPlacedEventFilter =
  TypedEventFilter<PredictionPlacedEvent>;

export type TreasuryAddressSetEvent = TypedEvent<
  [string],
  { _address: string }
>;

export type TreasuryAddressSetEventFilter =
  TypedEventFilter<TreasuryAddressSetEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SportPrediction extends BaseContract {
  contractName: "SportPrediction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SportPredictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _eventIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crp(overrides?: CallOverrides): Promise<[string]>;

    eventToUserPrediction(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean
      ] & {
        user: string;
        eventId: string;
        amount: BigNumber;
        reward: BigNumber;
        teamAScore: number;
        teamBScore: number;
        predicted: boolean;
        claimed: boolean;
      }
    >;

    eventToUsers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllUserPredictions(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[SportPrediction.PredictionStructOutput[]]>;

    getEvents(
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getEventsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getLiveEvents(
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPredictableEvents(
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getPredictions(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SportPrediction.PredictionStructOutput[]]>;

    getUserPredictions(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[SportPrediction.PredictionStructOutput[]]>;

    initialize(
      _oracleAddress: string,
      _treasuryAddress: string,
      _crp: string,
      _predictAmount: BigNumberish,
      _multiplier: BigNumberish,
      _maxPredictions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPredictions(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    predict(
      _eventId: BytesLike,
      _teamAScore: BigNumberish,
      _teamBScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPredictions(
      _maxPredictions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiplier(
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleAddress(
      _oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPredictAmount(
      _predictAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sportOracle(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userPredictStatus(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    userToEvents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  claim(
    _eventIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crp(overrides?: CallOverrides): Promise<string>;

  eventToUserPrediction(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, number, number, boolean, boolean] & {
      user: string;
      eventId: string;
      amount: BigNumber;
      reward: BigNumber;
      teamAScore: number;
      teamBScore: number;
      predicted: boolean;
      claimed: boolean;
    }
  >;

  eventToUsers(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllUserPredictions(
    _user: string,
    overrides?: CallOverrides
  ): Promise<SportPrediction.PredictionStructOutput[]>;

  getEvents(
    _eventIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getEventsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getIndexedEvents(
    indexes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getLiveEvents(
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getPredictableEvents(
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getPredictions(
    _eventId: BytesLike,
    overrides?: CallOverrides
  ): Promise<SportPrediction.PredictionStructOutput[]>;

  getUserPredictions(
    _user: string,
    _eventIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<SportPrediction.PredictionStructOutput[]>;

  initialize(
    _oracleAddress: string,
    _treasuryAddress: string,
    _crp: string,
    _predictAmount: BigNumberish,
    _multiplier: BigNumberish,
    _maxPredictions: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPredictions(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  predict(
    _eventId: BytesLike,
    _teamAScore: BigNumberish,
    _teamBScore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictAmount(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPredictions(
    _maxPredictions: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiplier(
    _multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleAddress(
    _oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPredictAmount(
    _predictAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sportOracle(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userPredictStatus(
    _user: string,
    _eventIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  userToEvents(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    claim(_eventIds: BytesLike[], overrides?: CallOverrides): Promise<void>;

    crp(overrides?: CallOverrides): Promise<string>;

    eventToUserPrediction(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean
      ] & {
        user: string;
        eventId: string;
        amount: BigNumber;
        reward: BigNumber;
        teamAScore: number;
        teamBScore: number;
        predicted: boolean;
        claimed: boolean;
      }
    >;

    eventToUsers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllUserPredictions(
      _user: string,
      overrides?: CallOverrides
    ): Promise<SportPrediction.PredictionStructOutput[]>;

    getEvents(
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getEventsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getLiveEvents(
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getPredictableEvents(
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getPredictions(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<SportPrediction.PredictionStructOutput[]>;

    getUserPredictions(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<SportPrediction.PredictionStructOutput[]>;

    initialize(
      _oracleAddress: string,
      _treasuryAddress: string,
      _crp: string,
      _predictAmount: BigNumberish,
      _multiplier: BigNumberish,
      _maxPredictions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPredictions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    predict(
      _eventId: BytesLike,
      _teamAScore: BigNumberish,
      _teamBScore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    predictAmount(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxPredictions(
      _maxPredictions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiplier(
      _multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleAddress(
      _oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPredictAmount(
      _predictAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sportOracle(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userPredictStatus(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    userToEvents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Claim(address,bytes32,uint256)"(
      user?: string | null,
      eventId?: BytesLike | null,
      reward?: null
    ): ClaimEventFilter;
    Claim(
      user?: string | null,
      eventId?: BytesLike | null,
      reward?: null
    ): ClaimEventFilter;

    "MaxPredictionsSet(uint256)"(
      _maxPredictions?: null
    ): MaxPredictionsSetEventFilter;
    MaxPredictionsSet(_maxPredictions?: null): MaxPredictionsSetEventFilter;

    "MultiplierSet(uint256)"(multiplier?: null): MultiplierSetEventFilter;
    MultiplierSet(multiplier?: null): MultiplierSetEventFilter;

    "OracleAddressSet(address)"(_address?: null): OracleAddressSetEventFilter;
    OracleAddressSet(_address?: null): OracleAddressSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PredictAmountSet(uint256)"(_address?: null): PredictAmountSetEventFilter;
    PredictAmountSet(_address?: null): PredictAmountSetEventFilter;

    "PredictionPlaced(bytes32,address,int8,int8,uint256)"(
      _eventId?: BytesLike | null,
      _player?: string | null,
      _teamAScore?: null,
      _teamBScore?: null,
      _amount?: null
    ): PredictionPlacedEventFilter;
    PredictionPlaced(
      _eventId?: BytesLike | null,
      _player?: string | null,
      _teamAScore?: null,
      _teamBScore?: null,
      _amount?: null
    ): PredictionPlacedEventFilter;

    "TreasuryAddressSet(address)"(
      _address?: null
    ): TreasuryAddressSetEventFilter;
    TreasuryAddressSet(_address?: null): TreasuryAddressSetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    claim(
      _eventIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crp(overrides?: CallOverrides): Promise<BigNumber>;

    eventToUserPrediction(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventToUsers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllUserPredictions(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEvents(
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiveEvents(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getPredictableEvents(overrides?: CallOverrides): Promise<BigNumber>;

    getPredictions(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPredictions(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _oracleAddress: string,
      _treasuryAddress: string,
      _crp: string,
      _predictAmount: BigNumberish,
      _multiplier: BigNumberish,
      _maxPredictions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPredictions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    predict(
      _eventId: BytesLike,
      _teamAScore: BigNumberish,
      _teamBScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictAmount(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPredictions(
      _maxPredictions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiplier(
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleAddress(
      _oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPredictAmount(
      _predictAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sportOracle(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userPredictStatus(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToEvents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _eventIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventToUserPrediction(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventToUsers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllUserPredictions(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEvents(
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiveEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPredictableEvents(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPredictions(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPredictions(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _oracleAddress: string,
      _treasuryAddress: string,
      _crp: string,
      _predictAmount: BigNumberish,
      _multiplier: BigNumberish,
      _maxPredictions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPredictions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predict(
      _eventId: BytesLike,
      _teamAScore: BigNumberish,
      _teamBScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPredictions(
      _maxPredictions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiplier(
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleAddress(
      _oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPredictAmount(
      _predictAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sportOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userPredictStatus(
      _user: string,
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToEvents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
