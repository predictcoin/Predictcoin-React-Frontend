/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ISportPrediction {
  export type SportEventStruct = {
    id: BytesLike;
    teamA: BytesLike;
    teamB: BytesLike;
    league: BytesLike;
    round: BytesLike;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    outcome: BigNumberish;
    season: BigNumberish;
    realTeamAScore: BigNumberish;
    realTeamBScore: BigNumberish;
  };

  export type SportEventStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number
  ] & {
    id: string;
    teamA: string;
    teamB: string;
    league: string;
    round: string;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    outcome: number;
    season: number;
    realTeamAScore: number;
    realTeamBScore: number;
  };
}

export interface SportOracleInterface extends utils.Interface {
  contractName: "SportOracle";
  functions: {
    "addSportEvent(string,string,string,string,uint256,uint256,uint16)": FunctionFragment;
    "addSportEvents(string[],string[],string[],string[],uint256[],uint256[],uint16[])": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "cancelSportEvents(bytes32[])": FunctionFragment;
    "declareOutcome(bytes32,int8,int8)": FunctionFragment;
    "declareOutcomes(bytes32[],int8[],int8[])": FunctionFragment;
    "eventExists(bytes32)": FunctionFragment;
    "getAllEvents(uint256,uint256)": FunctionFragment;
    "getEvents(bytes32[])": FunctionFragment;
    "getEventsLength()": FunctionFragment;
    "getIndexedEvents(uint256[])": FunctionFragment;
    "getLiveEvents()": FunctionFragment;
    "getPendingEvents()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSportEvent",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSportEvents",
    values: [
      string[],
      string[],
      string[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSportEvents",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "declareOutcome",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "declareOutcomes",
    values: [BytesLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eventExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEvents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvents",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexedEvents",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiveEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingEvents",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSportEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSportEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSportEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminAddressSet(address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SportEventAdded(bytes32,string,string,string,string,uint256,uint256,uint16,int8,int8)": EventFragment;
    "SportEventCancelled(bytes32)": EventFragment;
    "SportEventDeclared(bytes32,string,string,int8,int8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SportEventAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SportEventCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SportEventDeclared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminAddressSetEvent = TypedEvent<[string], { _address: string }>;

export type AdminAddressSetEventFilter = TypedEventFilter<AdminAddressSetEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SportEventAddedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ],
  {
    _eventId: string;
    _teamA: string;
    _teamB: string;
    _league: string;
    _round: string;
    _startTimestamp: BigNumber;
    _endTimestamp: BigNumber;
    _season: number;
    _realTeamAScore: number;
    _realTeamBScore: number;
  }
>;

export type SportEventAddedEventFilter = TypedEventFilter<SportEventAddedEvent>;

export type SportEventCancelledEvent = TypedEvent<
  [string],
  { _eventId: string }
>;

export type SportEventCancelledEventFilter =
  TypedEventFilter<SportEventCancelledEvent>;

export type SportEventDeclaredEvent = TypedEvent<
  [string, string, string, number, number],
  {
    _eventId: string;
    _teamA: string;
    _teamB: string;
    _realTeamAScore: number;
    _realTeamBScore: number;
  }
>;

export type SportEventDeclaredEventFilter =
  TypedEventFilter<SportEventDeclaredEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SportOracle extends BaseContract {
  contractName: "SportOracle";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SportOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSportEvent(
      _teamA: string,
      _teamB: string,
      _league: string,
      _round: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _season: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSportEvents(
      _teamAs: string[],
      _teamBs: string[],
      _leagues: string[],
      _rounds: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _seasons: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    cancelSportEvents(
      _eventIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    declareOutcome(
      _eventId: BytesLike,
      _realTeamAScore: BigNumberish,
      _realTeamBScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    declareOutcomes(
      _eventIds: BytesLike[],
      _realTeamAScores: BigNumberish[],
      _realTeamBScores: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventExists(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAllEvents(
      cursor: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getEvents(
      eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getEventsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getLiveEvents(
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    getPendingEvents(
      overrides?: CallOverrides
    ): Promise<[ISportPrediction.SportEventStructOutput[]]>;

    initialize(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminAddress(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSportEvent(
    _teamA: string,
    _teamB: string,
    _league: string,
    _round: string,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _season: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSportEvents(
    _teamAs: string[],
    _teamBs: string[],
    _leagues: string[],
    _rounds: string[],
    _startTimestamps: BigNumberish[],
    _endTimestamps: BigNumberish[],
    _seasons: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  cancelSportEvents(
    _eventIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  declareOutcome(
    _eventId: BytesLike,
    _realTeamAScore: BigNumberish,
    _realTeamBScore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  declareOutcomes(
    _eventIds: BytesLike[],
    _realTeamAScores: BigNumberish[],
    _realTeamBScores: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventExists(_eventId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getAllEvents(
    cursor: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getEvents(
    eventIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getEventsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getIndexedEvents(
    indexes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getLiveEvents(
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  getPendingEvents(
    overrides?: CallOverrides
  ): Promise<ISportPrediction.SportEventStructOutput[]>;

  initialize(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminAddress(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSportEvent(
      _teamA: string,
      _teamB: string,
      _league: string,
      _round: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addSportEvents(
      _teamAs: string[],
      _teamBs: string[],
      _leagues: string[],
      _rounds: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _seasons: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    cancelSportEvents(
      _eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    declareOutcome(
      _eventId: BytesLike,
      _realTeamAScore: BigNumberish,
      _realTeamBScore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    declareOutcomes(
      _eventIds: BytesLike[],
      _realTeamAScores: BigNumberish[],
      _realTeamBScores: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    eventExists(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllEvents(
      cursor: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getEvents(
      eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getEventsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getLiveEvents(
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    getPendingEvents(
      overrides?: CallOverrides
    ): Promise<ISportPrediction.SportEventStructOutput[]>;

    initialize(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminAddress(
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminAddressSet(address)"(_address?: null): AdminAddressSetEventFilter;
    AdminAddressSet(_address?: null): AdminAddressSetEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SportEventAdded(bytes32,string,string,string,string,uint256,uint256,uint16,int8,int8)"(
      _eventId?: BytesLike | null,
      _teamA?: string | null,
      _teamB?: string | null,
      _league?: null,
      _round?: null,
      _startTimestamp?: null,
      _endTimestamp?: null,
      _season?: null,
      _realTeamAScore?: null,
      _realTeamBScore?: null
    ): SportEventAddedEventFilter;
    SportEventAdded(
      _eventId?: BytesLike | null,
      _teamA?: string | null,
      _teamB?: string | null,
      _league?: null,
      _round?: null,
      _startTimestamp?: null,
      _endTimestamp?: null,
      _season?: null,
      _realTeamAScore?: null,
      _realTeamBScore?: null
    ): SportEventAddedEventFilter;

    "SportEventCancelled(bytes32)"(
      _eventId?: BytesLike | null
    ): SportEventCancelledEventFilter;
    SportEventCancelled(
      _eventId?: BytesLike | null
    ): SportEventCancelledEventFilter;

    "SportEventDeclared(bytes32,string,string,int8,int8)"(
      _eventId?: BytesLike | null,
      _teamA?: string | null,
      _teamB?: string | null,
      _realTeamAScore?: null,
      _realTeamBScore?: null
    ): SportEventDeclaredEventFilter;
    SportEventDeclared(
      _eventId?: BytesLike | null,
      _teamA?: string | null,
      _teamB?: string | null,
      _realTeamAScore?: null,
      _realTeamBScore?: null
    ): SportEventDeclaredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addSportEvent(
      _teamA: string,
      _teamB: string,
      _league: string,
      _round: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _season: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSportEvents(
      _teamAs: string[],
      _teamBs: string[],
      _leagues: string[],
      _rounds: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _seasons: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSportEvents(
      _eventIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    declareOutcome(
      _eventId: BytesLike,
      _realTeamAScore: BigNumberish,
      _realTeamBScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    declareOutcomes(
      _eventIds: BytesLike[],
      _realTeamAScores: BigNumberish[],
      _realTeamBScores: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventExists(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllEvents(
      cursor: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEvents(
      eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiveEvents(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingEvents(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminAddress(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSportEvent(
      _teamA: string,
      _teamB: string,
      _league: string,
      _round: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _season: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSportEvents(
      _teamAs: string[],
      _teamBs: string[],
      _leagues: string[],
      _rounds: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _seasons: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSportEvents(
      _eventIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    declareOutcome(
      _eventId: BytesLike,
      _realTeamAScore: BigNumberish,
      _realTeamBScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    declareOutcomes(
      _eventIds: BytesLike[],
      _realTeamAScores: BigNumberish[],
      _realTeamBScores: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventExists(
      _eventId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllEvents(
      cursor: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEvents(
      eventIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexedEvents(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiveEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminAddress(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
